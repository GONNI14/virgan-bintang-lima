/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Menu;
import kasir.Koneksi; // sesuaikan package-nya kalau beda
import kasir.KasirForm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import kasir.Koneksi; // Pastikan mengimpor ImageIcon
import javax.swing.WindowConstants; // Pastikan mengimpor WindowConstants



/**
 *
 * @author user
 */
public class MenuForm extends javax.swing.JFrame {
    private String selectedIdPesanan = null;
     private KasirForm kasirForm;
    private String selectedKodeMenu = null;
    
    

    /**
     * Creates new form MenuForm
     */
    
public MenuForm(KasirForm kasirForm) {
    initComponents();
    this.kasirForm = kasirForm; // <== simpan referensi KasirForm yang memanggil
    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    setLocationRelativeTo(null);
    initDataAndTable();

    tabelMenu.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {},
        new String [] {
            "Id", "Nama Makanan", "Harga", "Kategori"
        }
    ));

    tabelPesanan.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {},
        new String [] {
            "id", "Nama Makanan", "Kategori", "Harga", "Jumlah", "Total"
        }
    ));

    loadTable();
}
    
    public MenuForm() {
    this(null); // panggil constructor utama dengan parameter null
}

         
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtHarga = new javax.swing.JTextField();
        txtNamaMenu = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbKategori = new javax.swing.JComboBox<>();
        btnSimpan = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelMenu = new javax.swing.JTable();
        jSpinnerJumlah = new javax.swing.JSpinner();
        txtJumlah = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelPesanan = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnTambahPesan = new javax.swing.JButton();
        lblTotalBayar = new javax.swing.JLabel();
        btnHapusPesanan = new javax.swing.JButton();
        btnEditPesanan = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(1920, 1080));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Harga :");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, -1, 57));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Nama Menu");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 240, -1, 57));
        jPanel2.add(txtHarga, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 337, 218, 53));
        jPanel2.add(txtNamaMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 244, 218, 53));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Kategori :");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 440, -1, 57));

        cmbKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Makanan", "Minuman" }));
        cmbKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbKategoriActionPerformed(evt);
            }
        });
        jPanel2.add(cmbKategori, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 434, 218, 46));

        btnSimpan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });
        jPanel2.add(btnSimpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 640, 100, 30));

        tabelMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Nama Makanan", "Harga", "Title 4"
            }
        ));
        tabelMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelMenuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelMenu);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 271, 665, 143));

        jSpinnerJumlah.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel2.add(jSpinnerJumlah, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 550, 150, 40));

        txtJumlah.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtJumlah.setText("Jumlah :");
        jPanel2.add(txtJumlah, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 530, -1, 57));

        tabelPesanan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "Nama Makanan", "Harga", "Jumlah", "Total", "Kategori"
            }
        ));
        tabelPesanan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelPesananMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelPesanan);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 530, 550, 120));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("DAFTAR MENU");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 70, 280, 110));

        btnTambahPesan.setBackground(new java.awt.Color(51, 255, 0));
        btnTambahPesan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTambahPesan.setText("Tambah Pesanan");
        btnTambahPesan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahPesanActionPerformed(evt);
            }
        });
        jPanel2.add(btnTambahPesan, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 720, -1, 50));
        jPanel2.add(lblTotalBayar, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 450, 228, 100));

        btnHapusPesanan.setBackground(new java.awt.Color(255, 0, 0));
        btnHapusPesanan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnHapusPesanan.setText("Hapus Pesanan");
        btnHapusPesanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusPesananActionPerformed(evt);
            }
        });
        jPanel2.add(btnHapusPesanan, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 720, -1, 50));

        btnEditPesanan.setBackground(new java.awt.Color(255, 153, 0));
        btnEditPesanan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEditPesanan.setText("EditPesanan");
        btnEditPesanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPesananActionPerformed(evt);
            }
        });
        jPanel2.add(btnEditPesanan, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 720, -1, 50));

        btnCheckout.setBackground(new java.awt.Color(0, 255, 0));
        btnCheckout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCheckout.setText("Checkout");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });
        jPanel2.add(btnCheckout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 800, -1, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        // TODO add your handling code here:
        try {
        String namaMenu = txtNamaMenu.getText();
        int harga = Integer.parseInt(txtHarga.getText());
        String kategori = cmbKategori.getSelectedItem().toString().toLowerCase(); // enum PostgreSQL huruf kecil

        Connection conn = Koneksi.getConnection();

        // 🔹 1. Ambil kode terakhir
        String sqlKode = "SELECT kodemenu FROM menu ORDER BY kodemenu DESC LIMIT 1";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sqlKode);

        String newKode = "M001"; // default kalau belum ada data
        if (rs.next()) {
            String lastKode = rs.getString("kodemenu"); // contoh: M004
            int nomor = Integer.parseInt(lastKode.substring(1)) + 1;
            newKode = String.format("M%03d", nomor);   // hasil: M005
        }

        // 🔹 2. Insert pakai kode baru
        String sql = "INSERT INTO menu (kodemenu, namamenu, harga, kategori) VALUES (?, ?, ?, ?::kategori_enum)";
        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setString(1, newKode);
        pst.setString(2, namaMenu);
        pst.setInt(3, harga);
        pst.setString(4, kategori);

        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Data berhasil disimpan!");

        loadTable();

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage());
    }
        
        txtNamaMenu.setText("");
txtHarga.setText("");
cmbKategori.setSelectedIndex(0);  // kembali ke default pilihan pertama
txtNamaMenu.requestFocus(); 
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void tabelMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelMenuMouseClicked
        // TODO add your handling code here:
      int row = tabelMenu.getSelectedRow();
    if (row != -1) {
        selectedKodeMenu = tabelMenu.getValueAt(row, 0).toString();
        txtNamaMenu.setText(tabelMenu.getValueAt(row, 1).toString());
        txtHarga.setText(tabelMenu.getValueAt(row, 2).toString());

        // Ambil kategori dari tabel
        String kategoriDb = tabelMenu.getValueAt(row, 3).toString(); // misal "makanan"
        // Ubah ke format kapital awal agar cocok pilihan di JComboBox
        String kategoriProper = kategoriDb.substring(0, 1).toUpperCase() + kategoriDb.substring(1);
        cmbKategori.setSelectedItem(kategoriProper);
    }
    }//GEN-LAST:event_tabelMenuMouseClicked

    private void btnTambahPesanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahPesanActionPerformed
        // TODO add your handling code here:
   DefaultTableModel modelMenu = (DefaultTableModel) tabelMenu.getModel();
        DefaultTableModel modelPesanan = (DefaultTableModel) tabelPesanan.getModel();

        int selectedRow = tabelMenu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang ingin dipesan!");
            return;
        }

        String id = modelMenu.getValueAt(selectedRow, 0).toString();
        String nama = modelMenu.getValueAt(selectedRow, 1).toString();
        int harga = Integer.parseInt(modelMenu.getValueAt(selectedRow, 2).toString());
        String kategori = modelMenu.getValueAt(selectedRow, 3).toString();
        String stokStr = modelMenu.getValueAt(selectedRow, 4).toString();

        if (stokStr.equalsIgnoreCase("Habis")) {
            JOptionPane.showMessageDialog(this, "Stok habis! Tidak bisa menambah pesanan.");
            return;
        }
        int stok = Integer.parseInt(stokStr);

        int jumlah = (Integer) jSpinnerJumlah.getValue();
        if (jumlah <= 0) {
            JOptionPane.showMessageDialog(this, "Jumlah harus lebih dari 0!");
            return;
        }

        int totalDipesan = 0;
        for (int i = 0; i < modelPesanan.getRowCount(); i++) {
            if (modelPesanan.getValueAt(i, 0).toString().equals(id)) {
                totalDipesan += Integer.parseInt(modelPesanan.getValueAt(i, 4).toString());
            }
        }

        if (totalDipesan + jumlah > stok) {
            JOptionPane.showMessageDialog(this,
                "Stok tidak cukup! Stok tersisa: " + (stok - totalDipesan));
            return;
        }

        boolean found = false;
        for (int i = 0; i < modelPesanan.getRowCount(); i++) {
            if (modelPesanan.getValueAt(i, 0).toString().equals(id)) {
                int oldJumlah = Integer.parseInt(modelPesanan.getValueAt(i, 4).toString());
                int newJumlah = oldJumlah + jumlah;
                modelPesanan.setValueAt(newJumlah, i, 4);
                modelPesanan.setValueAt(newJumlah * harga, i, 5);
                found = true;
                break;
            }
        }

        if (!found) {
            modelPesanan.addRow(new Object[]{id, nama, kategori, harga, jumlah, harga * jumlah});
        }

        int stokBaru = stok - jumlah;
        modelMenu.setValueAt(stokBaru > 0 ? stokBaru : "Habis", selectedRow, 4);
        hitungTotalBayar();
        JOptionPane.showMessageDialog(this, "Pesanan berhasil ditambahkan!");    // 🔹 Tutup form menu dan kembali ke kasir
    
    }//GEN-LAST:event_btnTambahPesanActionPerformed

    private void btnHapusPesananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusPesananActionPerformed
        // TODO add your handling code here:
       int selectedRow = tabelPesanan.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih pesanan yang ingin dihapus terlebih dahulu!");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) tabelPesanan.getModel();
    String kodeMenu = model.getValueAt(selectedRow, 0).toString();
    int jumlah = Integer.parseInt(model.getValueAt(selectedRow, 4).toString());

    int confirm = JOptionPane.showConfirmDialog(this,
        "Yakin ingin menghapus pesanan ini?",
        "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        try (Connection conn = Koneksi.getConnection()) {
            String sql = "UPDATE menu SET stok = stok + ? WHERE kodemenu = ?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, jumlah);
            pst.setString(2, kodeMenu);
            pst.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal mengembalikan stok: " + e.getMessage());
        }

        model.removeRow(selectedRow);

        hitungTotalBayar();
        loadTable(); // hanya refresh tampilan tabel menu

        JOptionPane.showMessageDialog(this, "Pesanan berhasil dihapus dan stok dikembalikan!");
    }
    }//GEN-LAST:event_btnHapusPesananActionPerformed

    private void btnEditPesananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPesananActionPerformed
        // TODO add your handling code here:
     int selectedRow = tabelPesanan.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Silakan pilih pesanan yang ingin diedit terlebih dahulu!");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) tabelPesanan.getModel();

    try (Connection conn = Koneksi.getConnection()) {
        // Ambil data lama
        String kodeMenu = model.getValueAt(selectedRow, 0).toString();
        int jumlahLama = Integer.parseInt(model.getValueAt(selectedRow, 4).toString());

        // Ambil data baru
        int jumlahBaru = (int) jSpinnerJumlah.getValue();
        int harga = Integer.parseInt(txtHarga.getText());
        int totalBaru = harga * jumlahBaru;

        // Hitung selisih
        int selisih = jumlahBaru - jumlahLama;

        if (selisih != 0) {
            String sql;
            int nilaiUpdate;

            if (jumlahBaru > jumlahLama) {
                // Pesanan ditambah -> stok berkurang
                sql = "UPDATE menu SET stok = stok - ? WHERE kodemenu = ?";
                nilaiUpdate = jumlahBaru - jumlahLama;
            } else {
                // Pesanan dikurangi -> stok bertambah
                sql = "UPDATE menu SET stok = stok + ? WHERE kodemenu = ?";
                nilaiUpdate = jumlahLama - jumlahBaru;
            }

            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, nilaiUpdate);
            pst.setString(2, kodeMenu);
            pst.executeUpdate();
        }

        // Update data di tabel pesanan
        model.setValueAt(jumlahBaru, selectedRow, 4);
        model.setValueAt(totalBaru, selectedRow, 5);

        // Refresh total dan tabel menu
        hitungTotalBayar();
        loadTable();

        // Kosongkan form input
        txtNamaMenu.setText("");
        txtHarga.setText("");
        jSpinnerJumlah.setValue(1);

        JOptionPane.showMessageDialog(this, "Pesanan berhasil diperbarui dan stok disesuaikan!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat memperbarui pesanan: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnEditPesananActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
   System.out.println("Tombol Checkout diklik!");
    System.out.println("Apakah kasirForm null? " + (kasirForm == null));

    if (kasirForm == null) {
        JOptionPane.showMessageDialog(this,
            "KasirForm belum terbuka. Silakan buka Menu dari halaman Kasir.",
            "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    DefaultTableModel modelPesanan = (DefaultTableModel) tabelPesanan.getModel();
    int rowCount = modelPesanan.getRowCount();

    if (rowCount == 0) {
        JOptionPane.showMessageDialog(this, "Belum ada pesanan untuk di-checkout.");
        return;
    }

    // 1) Simpan semua data pesanan ke array (dan validasi non-null)
    Object[][] dataPesanan = new Object[rowCount][6];
    for (int i = 0; i < rowCount; i++) {
        for (int j = 0; j < 6; j++) {
            Object val = modelPesanan.getValueAt(i, j);
            // Jika ada null, isi dengan default ("" untuk string, 0 untuk angka)
            if (val == null) {
                if (j == 3 || j == 4 || j == 5) { // kolom angka: harga, jumlah, total
                    val = 0;
                } else {
                    val = "";
                }
            }
            dataPesanan[i][j] = val;
        }
    }

    // 2) Debug print (bisa dihapus setelah yakin)
    System.out.println("=== DataPesanan yang dikirim ke KasirForm ===");
    for (int i = 0; i < dataPesanan.length; i++) {
        System.out.println(java.util.Arrays.toString(dataPesanan[i]));
    }

    // 3) Kirim data ke KasirForm (panggilan yang aman)
    try {
        kasirForm.tambahPesananKeTabel(dataPesanan);
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Gagal mengirim pesanan ke Kasir: " + ex.getMessage());
        return;
    }

    // 4) Update stok di database — tetap pakai modelPesanan (pastikan kolom 0 & 4 valid)
    try (Connection conn = Koneksi.getConnection()) {
        String sql = "UPDATE menu SET stok = stok - ? WHERE kodemenu = ?";
        PreparedStatement pst = conn.prepareStatement(sql);
        for (int i = 0; i < rowCount; i++) {
            Object kodeObj = modelPesanan.getValueAt(i, 0);
            Object qtyObj = modelPesanan.getValueAt(i, 4);
            if (kodeObj == null) continue; // safety
            String kodeMenu = kodeObj.toString();
            int jumlah = 0;
            try {
                jumlah = Integer.parseInt(qtyObj == null ? "0" : qtyObj.toString());
            } catch (Exception ex) {
                jumlah = 0;
            }
            if (!kodeMenu.isEmpty() && jumlah > 0) {
                pst.setInt(1, jumlah);
                pst.setString(2, kodeMenu);
                pst.addBatch();
            }
        }
        try {
            pst.executeBatch();
        } catch (Exception ex) {
            // jika batch gagal, tampilkan pesan tapi jangan crash
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Perhatian: terjadi error saat update stok: " + ex.getMessage());
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Gagal update stok: " + e.getMessage());
    }

    // 5) Bersihkan tabel dan refresh tampilan menu
    modelPesanan.setRowCount(0);
    loadTable();
    JOptionPane.showMessageDialog(this, "Pesanan berhasil dikirim ke Kasir!");
    dispose();
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void cmbKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKategoriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbKategoriActionPerformed

    private void tabelPesananMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelPesananMouseClicked
        // TODO add your handling code here:
    int row = tabelPesanan.getSelectedRow();
    if (row != -1) {
        String nama = tabelPesanan.getValueAt(row, 1).toString();
        String harga = tabelPesanan.getValueAt(row, 3).toString(); // kolom harga = index 3
        String jumlah = tabelPesanan.getValueAt(row, 4).toString(); // kolom jumlah = index 4

        txtNamaMenu.setText(nama);
        txtHarga.setText(harga);
        jSpinnerJumlah.setValue(Integer.valueOf(jumlah));
    }
    }//GEN-LAST:event_tabelPesananMouseClicked

  public void updateTotalBayar() {
    DefaultTableModel model = (DefaultTableModel) tabelPesanan.getModel();
    int total = 0;
    for (int i = 0; i < model.getRowCount(); i++) {
        total += Integer.parseInt(model.getValueAt(i, 5).toString()); // kolom total = index 5
    }
    lblTotalBayar.setText("Total Bayar: Rp " + total);
}
    private void resetForm() {
    txtNamaMenu.setText("");
    txtHarga.setText("");
    cmbKategori.setSelectedIndex(0); // Jika pakai kategori
    jSpinnerJumlah.setValue(1);
}
    
    private void hitungTotalBayar() {
    DefaultTableModel model = (DefaultTableModel) tabelPesanan.getModel();
    int total = 0;
    for (int i = 0; i < model.getRowCount(); i++) {
        total += Integer.parseInt(model.getValueAt(i, 5).toString());
// kolom Total
    }
    System.out.println("Total Bayar: " + total); // Untuk sementara, tampilkan di console
    // Nanti bisa diganti untuk ditampilkan di JLabel atau komponen lain
    lblTotalBayar.setText("Total Bayar: Rp " + total);
}

    private void initDataAndTable() {
    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    setLocationRelativeTo(null);

    // Inisialisasi model tabel Menu secara eksplisit
    tabelMenu.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {},
        new String [] {
            "Id", "Nama Makanan", "Harga", "Kategori"
        }
    ));

    // Inisialisasi model tabel Pesanan (juga dipindahkan agar konsisten)
    tabelPesanan.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {},
        new String [] {
            "id", "Nama Makanan", "Kategori", "Harga", "Jumlah", "Total"
        }
    ));
    
    jSpinnerJumlah.setValue(1);
    
    // Panggil fungsi untuk mengambil data dari DB
    loadTable();
}
    
    private void clearForm() {
    txtNamaMenu.setText("");
    txtHarga.setText("");
    cmbKategori.setSelectedIndex(0); // kembali ke default pilihan pertama
}

    public void loadTable() {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("ID");
    model.addColumn("Nama Makanan");
    model.addColumn("Harga");
    model.addColumn("Kategori");
    model.addColumn("Stok"); // kolom baru

    try {
        Connection conn = Koneksi.getConnection();
        String sql = "SELECT kodemenu, namamenu, harga, kategori, stok FROM menu ORDER BY kodemenu ASC";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);

        while (rs.next()) {
            // Ambil stok dan tampilkan 'Habis' kalau 0
            int stok = rs.getInt("stok");
            String tampilStok = stok > 0 ? String.valueOf(stok) : "Habis";

            model.addRow(new Object[]{
                rs.getString("kodemenu"),
                rs.getString("namamenu"),
                rs.getInt("harga"),
                rs.getString("kategori"),
                tampilStok
            });
        }

        tabelMenu.setModel(model);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Gagal load data: " + e.getMessage());
    }
    
    tabelMenu.getColumnModel().getColumn(0).setPreferredWidth(50);  // Kolom ID
tabelMenu.getColumnModel().getColumn(1).setPreferredWidth(150); // Nama
tabelMenu.getColumnModel().getColumn(2).setPreferredWidth(70);  // Harga
tabelMenu.getColumnModel().getColumn(3).setPreferredWidth(80);  // Kategori
tabelMenu.getColumnModel().getColumn(4).setPreferredWidth(60);  // Stok

}



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnEditPesanan;
    private javax.swing.JButton btnHapusPesanan;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnTambahPesan;
    private javax.swing.JComboBox<String> cmbKategori;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerJumlah;
    private javax.swing.JLabel lblTotalBayar;
    private javax.swing.JTable tabelMenu;
    private javax.swing.JTable tabelPesanan;
    private javax.swing.JTextField txtHarga;
    private javax.swing.JLabel txtJumlah;
    private javax.swing.JTextField txtNamaMenu;
    // End of variables declaration//GEN-END:variables
}
